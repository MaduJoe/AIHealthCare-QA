name: LunitCare QA CI/CD

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]
  workflow_dispatch:

jobs:
  api-tests:
    runs-on: ubuntu-latest
    name: API 설정 테스트

    steps:
      - uses: actions/checkout@v4

      - name: mock-server 시작
        run: |
          docker run -d --name mock-server -p 5000:5000 \
            -v ${{ github.workspace }}/mock_server:/app \
            -w /app python:3.9 \
            bash -c "pip install -r requirements.txt && python app.py"

      - name: mock-server 준비 대기
        run: |
          echo "mock-server 준비 기다리기..."
          for i in {1..10}; do
            curl -s http://localhost:5000/analyze && echo "준비 완료" && break
            echo "준비 중... ($i)"
            sleep 2
          done

      - name: Python 설정
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: 의존성 설치
        working-directory: api_tests
        run: |
          pip install -r requirements.txt
          pip install pytest-html pytest-cov

      - name: API 테스트 실행
        working-directory: api_tests
        run: |
          pytest -v --html=report.html --cov=. --cov-report=xml || true

      - name: 결과 업로드
        uses: actions/upload-artifact@v4
        with:
          name: api-test-report
          path: |
            api_tests/report.html
            api_tests/coverage.xml

  performance-tests:
    runs-on: ubuntu-latest
    name: API 테스트
    needs: api-tests

    steps:
      - uses: actions/checkout@v4

      - name: mock-server 시작
        run: |
          docker run -d --name mock-server -p 5000:5000 \
            -v ${{ github.workspace }}/mock_server:/app \
            -w /app python:3.9 \
            bash -c "pip install -r requirements.txt && python app.py"

      - name: mock-server 준비 대기
        run: |
          for i in {1..10}; do
            curl -s http://localhost:5000/analyze && break
            echo "mock-server 준비중... ($i)"
            sleep 2
          done

      - name: Python 설정
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 의존성 설치
        working-directory: api_tests
        run: |
          pip install -r requirements.txt
          pip install matplotlib numpy pytest-html tqdm

      - name: 성능 테스트 실행
        working-directory: api_tests
        run: |
          pytest test_performance.py -v || true

      - name: 결과 업로드
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-results
          path: api_tests/performance_results

  e2e-tests:
    runs-on: ubuntu-latest
    name: E2E 테스트
    needs: api-tests

    steps:
      - uses: actions/checkout@v4

      - name: UI 서버 (Streamlit) 시작
        run: |
          docker run -d --name ui-service -p 8501:8501 \
            -v ${{ github.workspace }}:/app \
            -w /app python:3.9 \
            bash -c "pip install -r requirements.txt && streamlit run ui_app.py"

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: e2e_tests/package-lock.json

      - name: 의존성 설치
        working-directory: e2e_tests
        run: npm ci

      - name: Playwright 드론시 설치
        working-directory: e2e_tests
        run: npx playwright install --with-deps

      - name: E2E 테스트 실행
        working-directory: e2e_tests
        run: npm run test:parallel || true

      - name: 컨퍼런시 보고서 업로드
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            e2e_tests/playwright-report
            e2e_tests/test-results
            e2e_tests/coverage-report

  test-report:
    runs-on: ubuntu-latest
    name: 테스트 보고서 생성
    if: always()
    needs: [api-tests, performance-tests, e2e-tests]

    steps:
      - uses: actions/checkout@v4

      - name: 결과 다운로드 (API)
        uses: actions/download-artifact@v4
        with:
          name: api-test-report
          path: reports/api
        continue-on-error: true

      - name: 결과 다운로드 (Performance)
        uses: actions/download-artifact@v4
        with:
          name: performance-test-results
          path: reports/performance
        continue-on-error: true

      - name: 결과 다운로드 (E2E)
        uses: actions/download-artifact@v4
        with:
          name: e2e-test-results
          path: reports/e2e
        continue-on-error: true

      - name: 보고서 합치
        run: |
          mkdir -p combined-report
          cp -r reports/api/* combined-report/ || true
          cp -r reports/performance/* combined-report/ || true
          cp -r reports/e2e/* combined-report/ || true

      - name: 합치 보고서 업로드
        uses: actions/upload-artifact@v4
        with:
          name: lunitcare-qa-report
          path: combined-report